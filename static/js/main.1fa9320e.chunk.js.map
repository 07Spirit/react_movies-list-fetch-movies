{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","initialForm","FindMovie","setMovies","useState","findedFilm","setFindedFilm","inputValue","setInputValue","isLoading","setIsLoading","isRendering","undefined","isFirstError","htmlFor","type","id","placeholder","value","onChange","event","currentTarget","classNames","onClick","query","preventDefault","fetch","then","res","json","catch","Response","Error","items","Poster","Title","Plot","imdbID","prevState","image","finally","disabled","prevMovie","some","elem","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1fa9320e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={movie.imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {movie.description}\n          <br />\n          <a href={movie.imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport { MovieData } from '../../types/MovieData';\n\nconst initialForm = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const FindMovie: React.FC<{\n  setMovies: React.Dispatch<React.SetStateAction<Movie[]>>\n}> = ({ setMovies }) => {\n  const [findedFilm, setFindedFilm] = useState<Movie>(initialForm);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const searchNewfFilm = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    getMovie(inputValue)\n      .then(\n        (items) => {\n          const {\n            Poster, Title, Plot, imdbID,\n          } = items as MovieData;\n\n          setFindedFilm((prevState) => {\n            const image = Poster !== 'N/A' ? Poster\n              : 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\n            return {\n              ...prevState,\n              title: Title,\n              description: Plot,\n              imgUrl: image,\n              imdbUrl: `http://www.imdb.com/title/${imdbID}`,\n              imdbId: imdbID,\n            };\n          });\n        },\n      )\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const isRendering = findedFilm.title && findedFilm.title !== undefined;\n\n  const handleAddFilm = () => {\n    if (isRendering) {\n      setMovies((prevMovie) => {\n        if (prevMovie.some((elem) => elem.imdbId === findedFilm.imdbId)) {\n          return prevMovie;\n        }\n\n        return [\n          ...prevMovie,\n          findedFilm,\n        ];\n      });\n    }\n\n    setInputValue('');\n    setFindedFilm(initialForm);\n  };\n\n  const isFirstError = findedFilm.title === undefined;\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={inputValue}\n              onChange={(event) => setInputValue(event.currentTarget.value)}\n            />\n          </div>\n\n          {isFirstError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                { 'is-loading': isLoading },\n              )}\n              onClick={searchNewfFilm}\n              disabled={inputValue === ''}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          { inputValue && isRendering && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddFilm}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n      {isRendering\n        && (\n          <div className=\"container\" data-cy=\"previewContainer\">\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard movie={findedFilm} />\n          </div>\n        )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?i=tt3896198&apikey=d50d4540';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie setMovies={setMovies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}